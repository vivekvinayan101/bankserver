Server creation
---------------

1.Create package.json file - npm init

2.Install Express framework - npm i express


Server side technology - node - resolve multiple requests at a time

API - HTTP request

Request structure
-----------------
header - secret data
body   - normal data, json/xml type


HTTP request types
------------------
GET     - Read
POST    - Create
DELETE  - Remove
PUT     - Complete updation 
PATCH   - Partial updation


Server respnose status code
---------------------------
100 - information
200 - success
300 - redirection
400 - client side error
500 - Server side error



Server Creation Steps
---------------------
1-import express
2-create app using express
3-set port number : 3000
4-resolve http requests


Nodemon
-------
if we run server using node, recompilation won't work. so we use another server. 

npm i -g nodemon



express.json - convert all req data from json to js

.json(data) - js to json and send as response

.status(statusCode) - change the response status code as statusCode



TOKEN in server
---------------

JWT TOKEN - json web TOKEN.

install: npm i jsonwebtoken.

library: jsonwebtoken.

sign(): method used to generate jwt token.

verify(): used to verify json web token



Token Verification
------------------

token Verification can be done using middlewares.

middlewares have the capacity to control server requests.

middleware is a function with 3 arguments - request,response,next.

there are two types of middlewares:

    1.Application specific middleware
        - works before all requests

    2.Router specific middleware
        - can apply to specific requests in server



How to solve runtime errors in JSON
-----------------------------------

try except

try 
    error causing code

catch

    error solve

.
MongoDB Database
----------------

Shell Commands
--------------
CRUD - Creata Read Update Delete

1.show dbs                                                      - to see databases

2.use (database_name)                                           - to open a database

3.show collections                                              - to see collections inside db

4.db(collection_name).find()                                    - to read all data in collections

5.db(collection_name).findOne({acno:1000})                      - to read a single data

6.db(collection_name).insertOne({"acno":1001,"name":Amal,....}) - to createa new data

7.db(collection_name).findOne({balance:{gt:4000}})              - find using condition (query selector example)

8.db(collection_name).deleteOne({"uname":"anu"})                - used to delete (delete count:output)

9.db(collection_name).updateOne({uname:anu},{$set:{uname:Anu}}) - update data


register - insertOne

login - findOne

deposit - updateOne

withdraw - updateOne

delete -  deleteOne


Server Database Integration
---------------------------

database - 27017
server - 3000

mongoose - library used to integrate server and database.

install - npm i mongoose



Steps
-----

1.Import mongoose

2.State a connection string to integrate

3.define a model for our collection


Frontend Server Integration
---------------------------

cors - cross origin resource sharing - library used to frontend server integration.


Steps
-----

1.import cors
2.connection string